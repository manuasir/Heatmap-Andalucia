#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('heatmap-viviendas-andalucia:server');
var http = require('http');
var Houses = require('../routes/models/houses');
var redis = require("redis"),
    client = redis.createClient('redis://77.227.117.213');

/**
 * Get port from environment and store in Express.
 */
var server;
var port = normalizePort(process.env.PORT || '3000');
app.set('port', process.env.PORT || port);

/**
 * Create HTTP server.
 */
let result = [];

const start = async () => {
  try{
  console.log("starting....")
  let data = await Houses.find();
  for(let item of data){
    result.push([item.latitude,item.longitude,item.price])
  }  
  let rawdata = {data:result}
  server = http.createServer(app);
  client.set("rawdata", JSON.stringify(rawdata), redis.print);

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}catch(err){
  console.error("error!",err);
  throw err;
}

}
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
start();